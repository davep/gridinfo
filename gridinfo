#!/usr/bin/env python
"""A tool for getting information about the Second Life grid."""

######################################################################
# Main app information.
__author__     = "Dave Pearson"
__copyright__  = "Copyright 2022, Dave Pearson"
__credits__    = [ "Dave Pearson" ]
__maintainer__ = "Dave Pearson"
__email__      = "davep@davep.org"
__version__    = "0.0.1"
__licence__    = "GPLv3+"

##############################################################################
# Python imports.
from typing       import Callable
from urllib.parse import quote
from tempfile     import NamedTemporaryFile
from datetime     import datetime

##############################################################################
# HTTPX imports.
import httpx

##############################################################################
# Textual imports.
from textual.app        import App, ComposeResult
from textual.screen     import Screen
from textual.binding    import Binding
from textual.css.query  import NoMatches
from textual.widgets    import Header, Footer, Input, Button, Static, Label
from textual.containers import Container, Horizontal

##############################################################################
# Rich Pixels imports.
from rich_pixels import Pixels

##############################################################################
def unpack_data( data: str, sep: str=" " ) -> dict[ str, str ]:
    """Unpack data coming from the text APIs.

    Args:
        data (str): The data to unpack.

    Returns:
        dict[ str, str ]: The unpacked data.
    """
    data_list = data.strip().split( sep )
    unpacked: dict[ str, str ] = {}
    while data_list:
        key, value, *data_list = data_list
        if key:
            unpacked[ key ] = value
    return unpacked

##############################################################################
async def get( url: str ) -> httpx.Response:
    """Get a response from a URL.

    Args:
        url (str): The URL to get a response from.

    Returns:
        httpx.Response: The response.
    """
    async with httpx.AsyncClient() as client:
        return await client.get( url, follow_redirects=True )

##############################################################################
def gridsurvey( query: str ) -> str:
    """Return the URL for the given Grid Survey query.

    Args:
        query (str): The query to make.

    Returns:
        str: The full URL for the query.
    """
    return f"http://api.gridsurvey.com/{query}"

##############################################################################
async def region_info( region: str ) -> dict[ str, str ]:
    """Get information about a given region.

    Args:
        region (str): The region to get the information for.

    Returns:
        dict[ str, str ]: The data for that region.
    """
    return unpack_data( " ".join(
        ( await get( gridsurvey( f"simquery.php?region={quote( region )}" ) ) ).text.split( "\n" )
    ) )

##############################################################################
async def region_map( map_uuid: str, size: int=40 ) -> Pixels:
    """Given a map UUID, get the texture.

    Args:
        map_uuid (str): The UUID of the map to acquire.
        size (int, optional): The size of a side of the resulting map tile.

    Returns:
        Pixels: The ``Pixel`` image.
    """
    with NamedTemporaryFile() as img:
        map_data = await get( f"http://secondlife.com/app/image/{map_uuid}/2" )
        img.write( map_data.content )
        return Pixels.from_image_path( img.name, resize=( size, size ) )

##############################################################################
class DataPair( Horizontal ):
    """Provides a widget for displaying a data/value pair."""

    def __init__( self, title: str, id: str, initial: str="", cleaner: Callable[ [ str ], str ]=str ) -> None:
        """Initialise the data pair display.

        Args:
            title (str): The title for the data pair.
            id (str): The ID.
            initial (str, optional): Optional initial value to use.
        """
        super().__init__( id=id )
        self._title   = title
        self._initial = initial
        self._cleaner = cleaner
        self._value   = Label( self._cleaner( self._initial ) )

    def compose( self ) -> ComposeResult:
        """Compose the widget.

        Returns:
            ComposeResult: The layout of the widget.
        """
        yield Label( f"{self._title}:", classes="title" )
        yield self._value

    def value( self, new_value: str ) -> None:
        self._value.update( self._cleaner( new_value ) )

##############################################################################
class RegionInfo( Screen ):
    """Screen for looking up information about a specific region."""

    BINDINGS = [ Binding( "escape", "app.pop_screen", "Close" ) ]
    """Bindings for this screen."""

    def compose( self ) -> ComposeResult:
        """Compose the display of the screen.

        Returns:
            ComposeResult: The main layout for the application.
        """
        yield Header()
        yield Horizontal(
            Input( placeholder="Second Life Region Name" ),
            Button( "Search", disabled=True ),
            id="region-input"
        )
        yield Container(
            DataPair( "Name", "name" ),
            DataPair( "Status", "status" ),
            DataPair( "X", "x" ),
            DataPair( "Y", "y" ),
            DataPair( "Access", "access" ),
            DataPair( "Estate", "estate" ),
            DataPair( "First Seen", "firstseen" ),
            DataPair( "Last Seen", "lastseen" ),
            DataPair( "Objects Map", "objects_uuid" ),
            DataPair( "Terrain Map", "terrain_uuid" ),
            DataPair( "Updated", "updated" ),
            DataPair( "UUID", "region_uuid" ),
            id      = "region-info",
            classes = "data"
        )
        yield Static( id="map" )
        yield Footer()

    def on_mount( self ) -> None:
        """Set the app up once the DOM is loaded."""
        self.set_focus( self.query_one( "#region-input Input", Input ) )

    def on_input_changed( self, event: Input.Changed ) -> None:
        """React to the region name being modified.

        Args:
            event (Input.Changed): The event for the change.
        """
        self.query_one(
            "#region-input Button", Button
        ).disabled = not bool( event.input.value.strip() )

    async def update_region_data( self ) -> None:
        """Update the region data."""
        data = await region_info( self.query_one( Input ).value )
        print( data )
        for key, value in data.items():
            try:
                self.query_one( f"#{key}", DataPair ).value( value )
            except NoMatches:
                pass
        map = self.query_one( "#map", Static )
        map.update( await region_map( data[ "objects_uuid" ], map.size.width ) )

    async def on_input_submitted( self, _: Input.Submitted ) -> None:
        """React to input being submitted.

        Args:
            event (Input.Submitted): The even for the submit.
        """
        await self.update_region_data()

    async def on_button_pressed( self, _: Button.Pressed ) -> None:
        """React to the search button being pressed.

        Args:
            event (Button.Pressed): The event for the press.
        """
        await self.update_region_data()

##############################################################################
async def grid_data() -> dict[ str, str ]:
    """Get the main data about the grid.

    Returns:
        dict[ str, str ]: The main grid information.
    """
    return unpack_data( ( await get( "https://api.secondlife.com/datafeeds/homepage.txt" ) ).text, "\n" )

##############################################################################
async def concurrency_data() -> dict[ str, str ]:
    """Get the concurrency data about the grid.

    Returns:
        dict[ str, str ]: The grid's concurrency data.
    """
    return unpack_data( " ".join(
        ( await get( gridsurvey( "metricquery.php?metric=concurrency" ) ) ).text.split( "\n" )
    ) )

##############################################################################
class Main( Screen ):
    """The main screen for the application."""

    BINDINGS = [
        Binding( "escape", "app.quit", "Quit" ),
        Binding( "slash", "region", "Region Search" )
    ]
    """The bindings for the main screen."""

    def compose(self) -> ComposeResult:
        """Compose the layout of the main screen.

        Returns:
            ComposeResult: The layout for the main screen.
        """

        def _unix_to_local( unix: str ) -> str:
            return str( datetime.utcfromtimestamp( int( unix or "0" ) ) )

        def _human_number( value: str ) -> str:
            try:
                return f"{int( value or '0' ):,}"
            except ValueError:
                return f"{float( value or '0' ):,}"

        def _linden_dollar( linden_dollar: str ) -> str:
            return f"L$ {( linden_dollar or '0.00' )} per USD"

        yield Header()
        yield Container(
            DataPair( "Exchange Rate", "exchange_rate", cleaner=_linden_dollar ),
            DataPair( "In-world Last Updated", "inworld_updated_unix", cleaner=_unix_to_local ),
            DataPair( "In-World", "inworld", cleaner=_human_number ),
            DataPair( "Signups Last Updated", "signups_updated_unix", cleaner=_unix_to_local ),
            DataPair( "Signups", "signups", cleaner=_human_number ),
            DataPair( "Exchange Rate Last Updated", "exchange_rate_updated_unix", cleaner=_unix_to_local ),
            id      = "grid-data",
            classes = "data"
        )
        yield Container(
            DataPair( "As Of", "date" ),
            DataPair( "Last Updated", "updated" ),
            DataPair( "Median", "median_online", cleaner=_human_number ),
            DataPair( "Mean", "mean_online", cleaner=_human_number ),
            DataPair( "Minimum", "min_online", cleaner=_human_number ),
            DataPair( "Maximum", "max_online", cleaner=_human_number ),
            id      = "grid-concurrency",
            classes = "data"
        )
        yield Footer()

    async def refresh_grid_info( self ):
        """Refresh the information about the grid."""
        data = await grid_data()
        for key, value in data.items():
            try:
                self.query_one( f"#{key}", DataPair ).value( value )
            except NoMatches:
                pass

    async def refresh_grid_concurrency( self ):
        """Refresh the grid concurrency data."""
        data = await concurrency_data()
        for key, value in data.items():
            try:
                self.query_one( f"#{key}", DataPair ).value( value )
            except NoMatches:
                pass

    def on_mount( self ) -> None:
        """Set things in motion on mount"""
        self.call_after_refresh( self.refresh_grid_info )
        self.call_after_refresh( self.refresh_grid_concurrency )

    def action_region( self ) -> None:
        """Show the region search/information screen."""
        self.app.push_screen( "region" )

##############################################################################
class GridInfo( App[ None ] ):
    """TUI app for showing information about the Second Life grid."""

    CSS_PATH = "gridinfo.css"
    """The name of the CSS file for the app."""

    TITLE = "Grid Information"
    """str: The title of the application."""

    SCREENS = {
        "main": Main,
        "region": RegionInfo
    }
    """The collection of application screens."""

    def on_mount( self ) -> None:
        """Set up the application on startup."""
        self.push_screen( "main" )

##############################################################################
# Main entry point.
if __name__ == "__main__":
    GridInfo().run()

### gridinfo.py ends here
