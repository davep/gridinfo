#!/usr/bin/env python
"""A tool for getting information about the Second Life grid."""

##############################################################################
# Python imports.
from urllib.request import urlopen
from urllib.parse   import quote
from tempfile       import NamedTemporaryFile

##############################################################################
# Textual imports.
from textual.app        import App, ComposeResult
from textual.binding    import Binding
from textual.css.query  import NoMatches
from textual.widgets    import Header, Footer, Input, Button, Static
from textual.containers import Container, Horizontal

##############################################################################
# Rich Pixels imports.
from rich_pixels import Pixels

##############################################################################
def gridsurvey( query: str ) -> str:
    """Return the URL for the given Grid Survey query.

    Args:
        query (str): The query to make.

    Returns:
        str: The full URL for the query.
    """
    return f"http://api.gridsurvey.com/{query}"

##############################################################################
def region_info( region: str ) -> dict[ str, str ]:
    """Get information about a given region.

    Args:
        region (str): The region to get the information for.

    Returns:
        dict[ str, str ]: The data for that region.
    """
    with urlopen( gridsurvey( f"simquery.php?region={quote( region )}" ) ) as response:
        return dict( line.split() for line in response.read().decode().split( "\n" ) )

##############################################################################
def region_map( map_uuid: str ) -> Pixels:
    """Given a map UUID, get the texture.

    Args:
        map_uuid (str): The UUID of the map to acquire.

    Returns:
        Pixels: The ``Pixel`` image.
    """
    with NamedTemporaryFile() as img:
        with urlopen( f"http://secondlife.com/app/image/{map_uuid}/2" ) as response:
            img.write( response.read() )
        return Pixels.from_image_path( img.name, resize=( size, size ) )

##############################################################################
class Label( Static ):
    """A widget for showing a label."""

    def __init__( self, label: str ) -> None:
        """Initialise a label.

        Args:
            label (str): The text of the label.
        """
        super().__init__( f"{label}:")

##############################################################################
class Value( Static ):
    """A widget for showing a value."""

##############################################################################
class GridInfo( App[ None ] ):
    """TUI app for showing information about the Second Life grid."""

    CSS_PATH = "gridinfo.css"
    """The name of the CSS file for the app."""

    TITLE = "Grid Information"
    """str: The title of the application."""

    BINDINGS = [
        Binding( "q", "quit", "Quit" )
    ]
    """The main bindings for the app."""

    def compose( self ) -> ComposeResult:
        """Compose the display of the application.

        Returns:
            ComposeResult: The main layout for the application.
        """

        yield Header()

        yield Horizontal(
            Input( placeholder="Second Life Region Name" ),
            Button( "Search", disabled=True ),
            id="region-input"
        )

        def _data( label: str, value_id: str ) -> Horizontal:
            return Horizontal( Label( label ), Value( id=value_id ) )

        yield Container(
            _data( "Name", "name" ),
            _data( "Status", "status" ),
            _data( "X", "x" ),
            _data( "Y", "y" ),
            _data( "Access", "access" ),
            _data( "Estate", "estate" ),
            _data( "First Seen", "firstseen" ),
            _data( "Last Seen", "lastseen" ),
            _data( "Objects Map", "objects_uuid" ),
            _data( "Terrain Map", "terrain_uuid" ),
            _data( "Updated", "updated" ),
            _data( "UUID", "region_uuid" ),
            id="data"
        )

        yield Static( id="map" )

        yield Footer()

    def on_mount( self ) -> None:
        """Set the app up once the DOM is loaded."""
        self.set_focus( self.query_one( "#region-input Input", Input ) )

    def on_input_changed( self, event: Input.Changed ) -> None:
        """React to the region name being modified.

        Args:
            event (Input.Changed): The event for the change.
        """
        self.query_one(
            "#region-input Button", Button
        ).disabled = not bool( event.input.value.strip() )

    def on_button_pressed( self, _: Button.Pressed ) -> None:
        """React to the search button being pressed.

        Args:
            event (Button.Pressed): The event for the press.
        """
        # TODO: Do this in the background.
        data = region_info( self.query_one( Input ).value )
        for key, value in data.items():
            try:
                self.query_one( f"#{key}", Value ).update( value )
            except NoMatches:
                pass
        self.query_one( "#map", Static ).update( region_map( data[ "objects_uuid" ] ) )

##############################################################################
# Main entry point.
if __name__ == "__main__":
    GridInfo().run()

### gridinfo.py ends here
